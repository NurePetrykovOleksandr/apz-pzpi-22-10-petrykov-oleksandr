МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»


ЗВІТ
до лабораторної роботи №1 з дисципліни
«Архітектура програмного забезпечення»
На тему: «Доопрацювання Vision & Scope»



Виконав:                                              		       Перевірив:
ст. гр. ПЗПІ-22-10 				               ас. кафедри ПІ 
Петриков О. Д.                                        		Дашенков Дмитро Сергійович


Харків 2025


Vision and Scope Document
for
Програмна система для смарт поливу рослин<AquaGuard>
Version 2.0 approved
Prepared by Oleksandr Petrykov
Харківський Національний Університет Радіоелектроніки
08.06.2025
3. Scope and Limitations
3.1 Scope of Initial Release
Початковий реліз охоплює повноцінне впровадження інтелектуальної системи автоматизованого поливу, яка об’єднує IoT-пристрої, серверну логіку на Python, веб-інтерфейс та мобільний застосунок на Flutter. Основна мета — забезпечити користувачам контроль і оптимізацію поливу на основі реальних показників середовища.
Компоненти системи:
IoT-рівень (фізичні пристрої):


Сенсори вологості ґрунту, підключені до Raspberry Pi.


Інші сенсори (температури, опадів) можуть бути підключені через GPIO.


Локальне кешування даних у разі втрати зв’язку з мережею.


Raspberry Pi керує реле/клапанами для поливу через Python-скрипти.


Серверна частина (бекенд):


Python (Flask або FastAPI) — API для обробки запитів, збору та аналізу даних.


Обробка правил поливу: користувач може задавати власні пороги вологості або використовувати автоматичний режим.


Передача команд до пристроїв (локально або через MQTT/WebSocket).


SQLite / PostgreSQL / JSON — для зберігання конфігурацій, логів, історії вимірювань.


Веб-клієнт:


Побудований на HTML/CSS/JavaScript або через просту Flask-панель.


Панель керування: статус зон, графіки вологості, журнал подій, аналітика.


Можливість керування вручну або активації автоматичного режиму.


Мобільний клієнт (Flutter):


Кросплатформений додаток (Android, потенційно iOS).
Інтерфейс для перегляду показників у реальному часі.
Push-сповіщення про критичні події (низька вологість, помилки, завершення поливу).
Bluetooth-зв’язок із сенсорами або доступ до даних з сервера.


Основний функціонал:



Підключення пристроїв до системи


Встановлення параметрів зон поливу


Автоматичне визначення необхідності поливу


Збір та зберігання даних


Історія вимірювань у вигляді графіків


Повідомлення про події


3.2 Scope of Subsequent Releases
У наступних релізах система буде суттєво вдосконалена за рахунок використання технологій штучного інтелекту. Основна мета — зробити систему самонавчальною, адаптивною та здатною до прогнозування і оптимізації на основі великих масивів даних.
Застосування ШІ:
Прогнозна модель поливу:


Використання ШІ для прогнозування необхідності поливу за погодними, ґрунтовими та історичними даними.
Адаптація режиму поливу до зміни кліматичних умов і типу культур.
Оптимізація використання ресурсів:
Алгоритми машинного навчання (ML) будуть використовувати дані про споживання води, погоду та ефективність поливу для автоматичного коригування режиму.


Розпізнавання аномалій:
Використання алгоритмів класифікації/кластеризації для виявлення несправностей у роботі сенсорів чи витоків води.


Індивідуальні рекомендації:
Генерація рекомендацій по вирощуванню культур, зрошенню або змінам у налаштуваннях системи на основі поведінки користувача і локальних умов.


Збирання даних:
Типи даних:


Телеметрія сенсорів (час, вологість, температура, освітлення, рН).
Геолокація, погодні умови, сезон.
Реакції користувача (вручну вмикав/вимикав, змінював параметри).
Зворотній зв’язок (оцінки, відгуки).


Методи збору:


Через Raspberry Pi + сенсори з буферизацією даних.
Мобільний застосунок (Flutter) — активність, місце використання.
Серверний лог — аналіз частоти поливів, поведінки користувача.
API з погодних сервісів (опціонально).


Навчання/використання:


Початковий етап — використання готових рішень (API): Gemini, OpenAI, Groq.
Другий етап — донавчання моделей на власних даних (наприклад, через AutoML, H2O.ai).
Третій етап — розробка власних моделей у TensorFlow/PyTorch для повної автономності та контролю.
Можлива реалізація окремого AI-модуля, який отримуватиме дані з основної системи, оброблятиме їх, а потім повертатиме рекомендації або дії.


3.3 Limitations and Exclusions
Обмеження системи:
Система не гарантує точність даних у випадку фізичних пошкоджень сенсорів або складних погодних умов.
У віддалених регіонах із поганим інтернетом робота може бути частково обмежена (без реального часу).
Навчання моделей може вимагати хмарних ресурсів — можливо додаткове фінансування.
Алгоритми ШІ потребують великої кількості якісних даних — якість рекомендацій на ранніх етапах може бути низькою.


Навмисно виключено:
Голосове управління — через обмежену потребу в аграрному середовищі.
Підтримка iOS — через фокус на Android та Flutter у поточній реалізації.
Підключення до реального часу метео-сервісів — замінено локальним прогнозуванням на основі ШІ.
Режим офлайн-аналітики — усі аналітичні модулі передбачають наявність підключення до сервера.
Інтеграція з дронами або супутниками — зарезервовано на віддалену перспективу (5+ років).
Висновки
У результаті виконання цієї роботи було оновлено розділ Scope and Limitations документа Vision & Scope. Визначено повний функціонал системи у першому релізі, включно з IoT, мобільним і веб-клієнтами. Також сформовано бачення інтеграції штучного інтелекту в майбутніх релізах, з урахуванням збору даних, варіантів навчання моделей та використання готових рішень. Визначено обмеження системи й свідомо виключений функціонал.

